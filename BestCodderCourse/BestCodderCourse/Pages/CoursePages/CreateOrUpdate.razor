@page "/createorupdate"
@page "/edit/{Id:int}"

@using BestCodder.Models
@using BestCodder.Business.Contracts
@using BestCodderCourse.Service
@inject ICourseRepository _courseRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileupload

<h4>Course Added</h4>
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <EditForm Model="CourseModel" OnValidSubmit="CourseCreateOrUpdate">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="CourseModel.Name" class="form-control"></InputText>
                    <ValidationMessage For="() => CourseModel.Name"></ValidationMessage>
                </div>
                <div class="form-group mt-2">
                    <label>CoursePrice</label>
                    <InputNumber @bind-Value="CourseModel.CoursePrice" class="form-control"></InputNumber>
                    <ValidationMessage For="() => CourseModel.CoursePrice"></ValidationMessage>
                </div>
                <div class="form-group mt-2">
                    <label>Description</label>
                    <InputTextArea @bind-Value="CourseModel.Description" class="form-control"></InputTextArea>
                    <ValidationMessage For="() => CourseModel.Description"></ValidationMessage>
                </div>
                <div class="form-group mt-2">
                    <label>Title</label>
                    <InputText @bind-Value="CourseModel.Title" class="form-control"></InputText>
                    <ValidationMessage For="() => CourseModel.Title"></ValidationMessage>
                </div>
                <div class="form-group mt-2">
                    <label>SubTitle</label>
                    <InputText @bind-Value="CourseModel.SubTitle" class="form-control"></InputText>
                    <ValidationMessage For="() => CourseModel.SubTitle"></ValidationMessage>

                </div>
                @if (Id > 0)
                {
                    <div class="form-group mt-2">
                        <InputFile OnChange="AddPicture"></InputFile>
                    </div>
                }
                
                <div class="form-group mt-2">
                    <button class="btn btn-success">Course Add</button>
                    <NavLink href="courseList" class="btn btn-danger">Back To Course List</NavLink>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private string? Title { get; set; }

    private CourseDto CourseModel { get; set; } = new CourseDto();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "Update";
            var data = await _courseRepository.GetCourse((int)Id);
            CourseModel = data.Data;
        }
        else
        {
           //create
        }
    }

    private async Task CourseCreateOrUpdate()
    {
        try
        {
            if (Id != null)
            {
                var updated = await _courseRepository.UpdateCourse((int)Id, CourseModel);
                if (updated.IsSuccess)
                    await _jsRuntime.ToastrSuccess(updated.Message);
                else
                    await _jsRuntime.ToastrError(updated.Message);
            }
            else
            {
                var created = await _courseRepository.CreateCourse(CourseModel);
                if (created.IsSuccess)
                    await _jsRuntime.ToastrSuccess(created.Message);
                else
                    await _jsRuntime.ToastrError(created.Message);
            }
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message.ToString());
        }
    }

    private async Task AddPicture(InputFileChangeEventArgs file)
    {
        var fileName = file.File;
        if (fileName != null)
        {
            var data = await _fileupload.UploadFile(fileName);
            var updateCourse = await _courseRepository.UpdateCourseImage((int)Id, data);
            if (updateCourse.IsSuccess)
                await _jsRuntime.ToastrSuccess(updateCourse.Message);
            else
                await _jsRuntime.ToastrError(updateCourse.Message);
        }
    }
    

}