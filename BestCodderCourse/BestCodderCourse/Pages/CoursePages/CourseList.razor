@page "/courseList"
@using BestCodder.Models
@using BestCodder.Business.Contracts

@inject ICourseRepository _courseRepository

@attribute [Authorize]

<div class="row mt-4">
    <div class="col-3">
        <h5>Course List</h5>
        <br/>
        <NavLink href="createorupdate" class="btn btn-success">Course Add</NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table">
            <thead class="thead-dark">
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Description</th>
                <th scope="col">Title</th>
                <th scope="col">IsActive</th>
            </tr>
            </thead>
            <tbody>

            @if (CourseModelList.Any())
            {
                foreach (var course in CourseModelList)
                {
                    <tr>
                        <th>@course.Name</th>
                        <td>@course.CoursePrice</td>
                        <td>@course.Description</td>
                        <td>@course.Title</td>
                        @if (@course.IsActive)
                        {
                            <td>
                                Active
                            </td>
                        }
                        else
                        {
                            <td>
                                Pasive
                            </td>
                        }
                        <td>
                            <NavLink href="@($"/edit/{course.Id}")" class="btn btn-primary">Edit</NavLink>
                        </td>

                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6">@ErrorMessage</td>
                </tr>
            }

            </tbody>
        </table>
    </div>
</div>


@code{
    private IEnumerable<CourseDto> CourseModelList { get; set; } = new List<CourseDto>();
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var data = await _courseRepository.GetAllCourse();
        if (!data.IsSuccess)
        {
            ErrorMessage = data.Message;
        }
        else
        {
            CourseModelList = data.Data;
        }
    }

}